<?php
require_once "./application/libraries/OAuth.php";

class Payments_model extends CI_Model 
{	
	public function make_pesapal_payment($client_id)
	{
		//$api = 'http://demo.pesapal.com';
		$api = 'https://www.pesapal.com';
	
		$token = $params 	= NULL;
		$iframelink 		= $api.'/api/PostPesapalDirectOrderV4';
		
		//Kenyan keys
		$consumer_key 		= "1VsCbDt7UgL7tiZMjXnea8TX3vRb/Lcj"; //fill key here
		$consumer_secret 	= "7PxQd2Zei6z/SlrqyMW5gUm8QvQ="; //fill secret here
		 
		$signature_method	= new OAuthSignatureMethod_HMAC_SHA1();
		$consumer 			= new OAuthConsumer($consumer_key, $consumer_secret);
		
		//get form details
		/*if(!$_POST['reference']){
			$ref				=  str_repeat('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',5);
			$_POST['reference']	=  substr(str_shuffle($ref),0,10);
		}*/
		
		//save client credit
		$data = array
		(
			'client_id' => $client_id,
			'client_credit_amount' => $this->input->post('credit_type_credits'),
			'created' => date('Y-m-d H:i:s')
		);
		
		$this->db->insert('client_credit', $data);
		$client_credit_id = $this->db->insert_id();
		
		//payment data
		$amount = $this->input->post('credit_type_amount');
		
		//$amount 		= str_replace(',','',$amount); // remove thousands seperator if included
		$amount 		= number_format($amount, 2); //format amount to 2 decimal places
		$desc 			= $this->input->post('description');
		$type 			= 'MERCHANT';	
		$first_name 	= '';
		$last_name 		= '';
		$email 			= $this->session->userdata('client_email');
		$phonenumber	= '';
		$currency 		= "KES";//$_POST['currency'];
		$reference 		= $client_credit_id;// $_POST['reference']; //unique transaction id, generated by merchant.
		$callback_url 	= site_url().'payment';//'http://localhost/pbf/demo/redirect.php'; //URL user to be redirected to after payment
		
		//Record order in your database.
		/*$database = new pesapalDatabase();
		$database->store($_POST);*/ 
			
		$post_xml	= "<?xml version=\"1.0\" encoding=\"utf-8\"?>
					   <PesapalDirectOrderInfo 
							xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" 
							xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" 
							Currency=\"".$currency."\" 
							Amount=\"".$amount."\" 
							Description=\"".$desc."\" 
							Type=\"".$type."\" 
							Reference=\"".$reference."\" 
							FirstName=\"".$first_name."\" 
							LastName=\"".$last_name."\" 
							Email=\"".$email."\" 
							PhoneNumber=\"".$phonenumber."\" 
							xmlns=\"http://www.pesapal.com\" />";
		$post_xml = htmlentities($post_xml);
		
		//post transaction to pesapal
		$iframe_src = OAuthRequest::from_consumer_and_token($consumer, $token, "GET", $iframelink, $params);
		$iframe_src->set_parameter("oauth_callback", $callback_url);
		$iframe_src->set_parameter("pesapal_request_data", $post_xml);
		$iframe_src->sign_request($signature_method, $consumer, $token);
		return $iframe_src;
	}

	public function get_credit_types()
	{
		$this->db->where('credit_type_status', 1);
		$query = $this->db->get('credit_type');
		
		return $query;
	}

	public function get_credit_type($credit_type_id)
	{
		$this->db->where('credit_type_id', $credit_type_id);
		$query = $this->db->get('credit_type');
		
		return $query;
	}
	
	public function get_client_credits($client_id)
	{
		$this->db->where(array('client_id'=>$client_id, 'client_credit_status'=>1));
		$this->db->order_by('created', 'DESC');
		$query = $this->db->get('client_credit');
		
		return $query;
	}
	
	public function get_client_bills($client_id)
	{
		$this->db->where('client_id', $client_id);
		$this->db->order_by('created', 'DESC');
		$query = $this->db->get('client_bill');
		
		return $query;
	}
	
	public function activate_payment($transaction_tracking_id, $client_credit_id)
	{
		$data['transaction_tracking_id'] = $transaction_tracking_id;
		$data['client_credit_status'] = 1;
		
		$this->db->where('client_credit_id', $client_credit_id);
		if($this->db->update('client_credit', $data))
		{
			return TRUE;
		}
		
		else
		{
			return FALSE;
		}
	}
	
	public function calculate_credit_total($client_id)
	{
		//select the user by email from the database
		$this->db->select('SUM(client_credit.client_credit_amount) AS total_credit');
		$this->db->where('client_credit_status = 1 AND client_id = '.$client_id);
		$this->db->from('client_credit');
		$query = $this->db->get();
		
		$result = $query->row();
		
		return $result->total_credit;
	}
	
	public function calculate_bill_total($client_id)
	{
		//select the user by email from the database
		$this->db->select('SUM(client_bill.client_bill_amount) AS total_bill');
		$this->db->where('client_bill_status = 1 AND client_id = '.$client_id);
		$this->db->from('client_bill');
		$query = $this->db->get();
		
		$result = $query->row();
		
		return $result->total_bill;
	}
	
	public function get_account_balance($client_id)
	{
		$bill_total = $this->payments_model->calculate_bill_total($client_id);
		$credit_total = $this->payments_model->calculate_credit_total($client_id);
		
		return ($credit_total - $bill_total);
	}
	
	public function bill_client($client_id, $amount)
	{
		//save client credit
		$data = array
		(
			'client_id' => $client_id,
			'client_bill_amount' => $amount,
			'created' => date('Y-m-d H:i:s')
		);
		
		if($this->db->insert('client_bill', $data))
		{
			$client_bill_id = $this->db->insert_id();
			return TRUE;
		}
		
		else
		{
			return FALSE;
		}
		
		
	}
}
?>